#!@PYTHON_BIN@

# Copyright (c) 2013 - The IBus Cangjie authors
#
# This file is part of ibus-cangjie, the IBus Cangjie input method engine.
#
# ibus-cangjie is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# ibus-cangjie is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with ibus-cangjie.  If not, see <http://www.gnu.org/licenses/>.


import os
import subprocess
import sys
import unittest


# -- Make sure we test the development tree ----------------------------------
sys.path.insert(0, "@SRCDIR@")
import src
sys.modules["ibus_cangjie"] = src


# -- Define some mock classes for the tests ----------------------------------
class MockEngine:
    def __init__(self):
        self._mock_auxiliary_text = ""
        self._mock_committed_text = ""

    def update_auxiliary_text(self, text, visible):
        self._mock_auxiliary_text = text.text

    def commit_text(self, text):
        self._mock_committed_text += text.text

    def update_lookup_table(self, table, visible):
        # We don't need anything here for the unit tests
        pass


class MockLookupTable:
    def __init__(self):
        self.clear()

    def clear(self):
        self._mock_candidates = []
        self._mock_cursor_pos = 0

    def set_page_size(self, size):
        self._mock_page_size = size

    def set_round(self, round):
        self._mock_round = round

    def set_orientation(self, orientation):
        self._mock_orientation = orientation

    def get_number_of_candidates(self):
        return len(self._mock_candidates)

    def append_candidate(self, candidate):
        self._mock_candidates.append(candidate)

    def get_cursor_pos(self):
        return self._mock_cursor_pos

    def get_candidate(self, index):
        return self._mock_candidates[index]

    def get_number_of_candidates(self):
        return len(self._mock_candidates)


class MockPropList:
    def append(self, property):
        # We don't need anything here for the unit tests
        pass


class MockProperty:
    def __init__(self, *args, **kwargs):
        # We don't need anything here for the unit tests
        pass


class MockCanberra:
    def __init__(self):
        self._mock_played_events = []

    def play(self, playId, *args):
        if "dialog-error" in args:
            self._mock_played_events.append("dialog-error")


# -- Monkey patch the environment with the mock classes ----------------------
from gi.repository import IBus
sys.modules["gi.repository.IBus"].Engine = MockEngine
sys.modules["gi.repository.IBus"].LookupTable = MockLookupTable
sys.modules["gi.repository.IBus"].Property = MockProperty
sys.modules["gi.repository.IBus"].PropList = MockPropList

try:
    import pycanberra
    sys.modules["pycanberra"].Canberra = MockCanberra
    os.environ["IBUS_CANGJIE_TESTS_HAVE_PYCANBERRA"] = "true"
except ImportError:
    # Let the tests know that they shouldn't try pycanberra
    os.environ["IBUS_CANGJIE_TESTS_HAVE_PYCANBERRA"] = "false"


# The unit tests will need this to find the settings schemas
os.environ["GSETTINGS_SCHEMA_DIR"] = "@BUILDDIR@/data"
subprocess.check_call(["glib-compile-schemas", os.environ["GSETTINGS_SCHEMA_DIR"]])

# -- Load and run our unit tests ---------------------------------------------
loader = unittest.TestLoader()
suite = loader.discover("@SRCDIR@/tests")
runner = unittest.TextTestRunner(verbosity=2)
result = runner.run(suite)

if result.failures or result.errors:
    sys.exit(1)
